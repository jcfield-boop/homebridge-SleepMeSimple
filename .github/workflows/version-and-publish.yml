name: Manual Version and Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  manual-build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'

    - name: Install Dependencies
      run: npm ci
      
    - name: Lint
      run: npm run lint

    - name: Clean
      run: npm run clean
      
    - name: Build TypeScript and UI
      run: npm run build
        
    - name: Verify Build
      run: |
        if [ ! -d "dist/homebridge-ui/public" ]; then
          echo "Error: dist/homebridge-ui/public directory is missing!"
          exit 1
        fi
        
        if [ ! -f "dist/homebridge-ui/public/index.html" ]; then
          echo "Error: index.html is missing from UI build!"
          exit 1
        fi

    - name: Commit any pending changes
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git diff --staged --quiet || git commit -m "Build artifacts for version bump [skip ci]"

    - name: Bump Version
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        npm version ${{ github.event.inputs.version_type || 'patch' }}
        
    - name: Push Changes
      run: |
        git push
        git push --tags

    - name: Rebuild after Version Bump
      run: |
        npm run clean
        npm run build

    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Get new version
      id: get_version
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Extract release notes from changelog
      id: extract_notes
      run: |
        # Extract release notes for the new version from CHANGELOG.md
        python3 << 'EOF'
        import re
        import sys
        import json
        
        version = "${{ steps.get_version.outputs.version }}"
        
        try:
            with open('CHANGELOG.md', 'r') as f:
                content = f.read()
            
            # Find the section for this version
            pattern = rf'^## {re.escape(version)} \([^)]+\)$(.*?)^## '
            match = re.search(pattern, content, re.MULTILINE | re.DOTALL)
            
            if match:
                release_notes = match.group(1).strip()
                
                # Clean up the notes - remove excessive newlines
                release_notes = re.sub(r'\n{3,}', '\n\n', release_notes)
                
                # Add installation instructions
                release_notes += f"\n\n## Installation\n```bash\nnpm install homebridge-sleepme-simple@{version}\n```"
                
                # Save to file for GitHub Actions
                with open('release_notes.md', 'w') as f:
                    f.write(release_notes)
                
                print(f"✅ Found release notes for version {version}")
            else:
                # Fallback release notes
                fallback_notes = f"""## Release {version}
        
        This release includes bug fixes and improvements.
        
        ## Installation
        ```bash
        npm install homebridge-sleepme-simple@{version}
        ```
        
        For detailed changes, please see the [full changelog](https://github.com/jcfield-boop/homebridge-SleepMeSimple/blob/main/CHANGELOG.md)."""
                
                with open('release_notes.md', 'w') as f:
                    f.write(fallback_notes)
                
                print(f"⚠️  No specific notes found for version {version}, using fallback")
        
        except Exception as e:
            print(f"❌ Error processing changelog: {e}")
            sys.exit(1)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: "v${{ steps.get_version.outputs.version }} - Release"
        body_path: release_notes.md
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
